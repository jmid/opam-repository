name: Windows CI
on:
  push:
  pull_request:
env:
  OPAMROOT: D:\opamroot
  OPAMSOLVERTIMEOUT: 120
jobs:
#  build:
#    strategy:
#      fail-fast: false
#      matrix:
#        os:
#          - windows-latest
#        windows_env:
#          - mingw
#          - msys2
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Checkout tree
#        uses: actions/checkout@v5
#        with:
#          fetch-depth: 2
#
#      - name: Download install.ps1
#        run: |
#          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
#          (New-Object System.Net.WebClient).DownloadFile("https://raw.githubusercontent.com/ocaml/opam/master/shell/install.ps1", ".\install.ps1")
#
#      - name: Restore opam cache
#        id: cache-opam
#        uses: actions/cache/restore@v4
#        with:
#          path: |
#            D:\opam\bin
#            D:\opamroot
#          key: ${{ runner.os }}-${{ matrix.windows_env }}-opam-${{ hashFiles('install.ps1') }}
#
#      - name: Add MSys2 to PATH
#        if: matrix.windows_env == 'msys2'
#        run: |
#          "C:\msys64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#
#      - name: Update MSys2 after cache restoration
#        if: steps.cache-opam.outputs.cache-hit == 'true' && matrix.windows_env == 'msys2'
#        run: |
#          C:\msys64\usr\bin\pacman.exe -Syu --noconfirm
#
#      - name: Install opam
#        if: steps.cache-opam.outputs.cache-hit != 'true'
#        run: |
#          Invoke-Expression "& ./install.ps1 -OpamBinDir 'D:\opam\bin'"
#
#      - name: Add opam to PATH
#        run: |
#          D:\opam\bin\opam --version
#          "D:\opam\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#
#      - name: Init opam (MinGW)
#        if: steps.cache-opam.outputs.cache-hit != 'true' && matrix.windows_env == 'mingw'
#        run: opam init --yes --no-setup .
#
#      - name: Init opam (MSys2)
#        if: steps.cache-opam.outputs.cache-hit != 'true' && matrix.windows_env == 'msys2'
#        run: |
#          C:\msys64\usr\bin\pacman.exe -Syu --noconfirm m4 make mingw-w64-i686-gcc mingw-w64-x86_64-gcc rsync unzip
#          opam init --yes --no-setup --cygwin-local-install .
#
#      - name: Restrict testing to available compilers
#        if: steps.cache-opam.outputs.cache-hit != 'true'
#        # TODO Amend this lowerbound as older compiler packages are updated
#        run: opam switch set-invariant --formula "`"ocaml`" {>= `"4.13`"}"
#
#      - name: Save opam cache
#        if: steps.cache-opam.outputs.cache-hit != 'true'
#        uses: actions/cache/save@v4
#        with:
#          path: |
#            D:\opam\bin
#            D:\opamroot
#          key: ${{ steps.cache-opam.outputs.cache-primary-key }}
#
#      - name: Print version information
#        run: |
#          opam --version
#          opam exec -- ocaml -version
#
#      - name: Get changed files
#        id: changed-files
#        if: github.event_name != 'push'
#        uses: tj-actions/changed-files@v47
#
#      - name: List all changed packages
#        id: changed-packages
#        if: github.event_name != 'push'
#        env:
#          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
#        run: |
#          $output = @()
#          Foreach ($file in ($env:ALL_CHANGED_FILES).Split(" ")) {
#            switch -Regex ($file) {
#              '^packages\\[^\\]*\\([^\\]*)\\.*' { $output += "$($matches[1])"; Break }
#              default { Write-Host "$file skipped"; Break }
#            }
#          }
#          $outputJson = $output | ConvertTo-Json
#          "data<<@@@" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
#          $outputJson | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
#          "@@@" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
#
#      - name: Install packages
#        env:
#          ALL_CHANGED_PACKAGES: ${{ steps.changed-packages.outputs.data }}
#        if: github.event_name != 'push'
#        run: |
#          $pkgs = $env:ALL_CHANGED_PACKAGES | ConvertFrom-Json
#          $failed = $false
#          opam update
#          Foreach ($pkg in $pkgs) {
#            Write-Host "::group::Testing `e[1;34m$pkg`e[0m"
#            opam install --color=always --confirm-level=unsafe-yes "$pkg"
#            Write-Host "::endgroup::"
#            switch ($LASTEXITCODE) {
#              0 { Break }
#              5 { Write-Host "$pkg is not installable. `e[1;33mSkip`e[0m."; Break } # TODO: Remove when https://github.com/ocaml/opam/issues/6017 is fixed
#              20 { Write-Host "$pkg is not installable. `e[1;33mSkip`e[0m."; Break }
#              31 { Write-Host "`e[1;31m$pkg failed to build`e[0m."; $failed = $true; Break }
#              default { throw "Unexpected error $_" }
#            }
#            Write-Host
#          }
#          if ($failed) {
#            throw "build failed"
#          }
#          Exit

# ###############
# MSys2 workflow
# ###############
  build-msys2:
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
    defaults:
      run:
        shell: msys2 {0}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup MSys2
        uses: msys2/setup-msys2@v2
        with:
          # msystem: MINGW64 is the default
          path-type: inherit
          update: true
          install: >-
            curl
            git
            m4
            make
            mingw-w64-i686-gcc
            mingw-w64-x86_64-gcc
            rsync
            unzip

      - name: Checkout tree
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Download opam installer
        run: |
          curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.ps1 > install.ps1
          powershell -File install.ps1 -OpamBinDir 'D:\opam\bin'
          echo $PATH
          echo "cat GITHUB_PATH before setting"
          cat $GITHUB_PATH
          echo "/d/opam/bin" >> "$GITHUB_PATH"
          echo "cat GITHUB_PATH after setting"
          cat $GITHUB_PATH

      - name: Initialize opam
        run: |
          echo $PATH
          /d/opam/bin/opam --version
          opam init --yes --no-setup --cygwin-local-install .
          eval $(opam env)
          opam --version
          opam exec -- ocaml -version

      - name: Restrict testing to available compilers
        # TODO Amend this lowerbound as older compiler packages are updated
        run: opam switch set-invariant --formula "\"ocaml\" {>= \"4.13\"}"

      - name: Get changed files
        id: changed-files
        # if: github.event_name != 'push'  # FIXME
        uses: tj-actions/changed-files@v47
        with:
          files: packages/**

      - name: Install changed packages
        if: steps.changed-files.outputs.any_changed == 'true'
        id: changed-packages
        # if: github.event_name != 'push'  # FIXME
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          failed=false
          opam update
          echo "all files:" $ALL_CHANGED_FILES
          for file in ${ALL_CHANGED_FILES}; do
            echo "file:" $file;
            pkg=$(echo $file | cut -d '\' -f 3);
            printf "::group::Testing \e[1;34m$pkg\e[0m";
            opam install -v --color=always --confirm-level=unsafe-yes "$pkg";
            exitcode=$?;
            printf "::endgroup::";
            case "$exitcode" in
              0)
                printf "\e[1;32m$pkg installed succesfully\e[0m."
                ;;
              5)
                printf "$pkg is not installable. \e[1;33mSkip\e[0m." # TODO: Remove when https://github.com/ocaml/opam/issues/6017 is fixed
                ;;
              20)
                printf "$pkg is not installable. \e[1;33mSkip\e[0m."
                ;;
              31)
                printf "\e[1;31m$pkg failed to build\e[0m."
                failed=true
                ;;
              *)
                printf "Unexpected error $exitcode" && exit 1
                ;;
            esac
          done
          if [ "$failed" = true ] ; then
            printf "build failed" && exit 1
          fi
